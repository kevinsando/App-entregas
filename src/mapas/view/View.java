/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mapas.view;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.Observable;
import java.util.Observer;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JPanel;
import mapas.graphs.Carrier;
import mapas.graphs.Graph;

/**
 *
 * @author Jason
 */
public class View extends javax.swing.JFrame implements Observer {

    private BufferedImage bi;

    /**
     * Creates new form View
     */
    public View() {
        initComponents();
        bi = new BufferedImage(this.getWidth(), this.getHeight(), BufferedImage.TYPE_INT_RGB);
        this.graphCheck.setSelected(true);
        graphPanel = new JPanel() {
            @Override
            public void paint(java.awt.Graphics g) {
                g.drawImage(map, 0, 0, this);
            }
        };
        this.setContentPane(graphPanel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        graphPanel = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        graphCheck = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        graphPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                graphPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout graphPanelLayout = new javax.swing.GroupLayout(graphPanel);
        graphPanel.setLayout(graphPanelLayout);
        graphPanelLayout.setHorizontalGroup(
            graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1069, Short.MAX_VALUE)
        );
        graphPanelLayout.setVerticalGroup(
            graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 686, Short.MAX_VALUE)
        );

        getContentPane().add(graphPanel, java.awt.BorderLayout.PAGE_START);

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("View");

        graphCheck.setSelected(true);
        graphCheck.setText("Draw graph");
        jMenu3.add(graphCheck);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void graphPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_graphPanelMouseClicked

        System.out.print(evt.getPoint().toString() + "\n");
    }//GEN-LAST:event_graphPanelMouseClicked

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new View().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBoxMenuItem graphCheck;
    private javax.swing.JPanel graphPanel;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    // End of variables declaration//GEN-END:variables

    Graph graph;
    Image map;
    private Thread runner;
    Carrier c;

    public void addCarrier() {
        if(graph.getVertex(1)==null){
            System.out.println("dddddddddddddd");
        }
       //c = new Carrier(graph.getVertex(1), graph.getVertex(1));
    }

    public Graph getGraph() {
        return graph;
    }

    public void setGraph(Graph g) {
        this.graph = g;
       // g.leerAristas();
       // g.leerVertices();
        //g.guardarAristas();
        //g.guardarVertices();
    }

    @Override
    public void update(Observable o, Object o1) {
        repaint();
    }

    @Override
    public void paint(Graphics g) {
        Graphics media = bi.getGraphics();
        super.paint(media);
        loadImages();
        if (graphCheck.isSelected()) {
            graph.paint(media);
        }
       c.paint((Graphics2D) media);
        g.drawImage(bi, 0, 0, null);
    }
//        Graphics media = map.getGraphics();
//        super.paint(media);
//        //renderImage(media);
//        if (graphBox.isSelected()) {
//            graph.paint(media);
//            c.paint((Graphics2D)media);
//        }
//        this.graphPanel.getGraphics().drawImage(map, 0, 30, null);

    public void loadImages() {
        ImageIcon iih = new ImageIcon("src/mapas/view/map.png");
        map = iih.getImage();
    }

    public void init() {
        runner = new Thread() {
            @Override
            public void run() {
                while (runner == Thread.currentThread()) {
                    repaint();
                    graph.updateCarrier(c);
                    try {
                        Thread.sleep(50);
                    } catch (InterruptedException ex) {
                    }
                }
            }

        };
        runner.start();
    }

    public Carrier getC() {
        return c;
    }

    public void setC(Carrier c) {
        this.c = c;
    }

}
