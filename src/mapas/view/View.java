/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mapas.view;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.Observable;
import java.util.Observer;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JPanel;
import lists.Iterator;
import lists.List;
import lists.SimpleLinkedList;
import mapas.graphs.Carrier;
import mapas.graphs.Graph;

/**
 *
 * @author Jason
 */
public class View extends javax.swing.JFrame {

    private BufferedImage bi;
    private String ruta;
    private String mapV;
    private String mapA;
    private Trayecto t;
    /**
     * Creates new form View
     */
    public void setRuta(String ruta) {
        this.ruta = ruta;
    }

    public void setT(Trayecto t) {
        this.t = t;
    }

    public void setMap(String map) {
        this.mapV = map;
    }

    public void setMapA(String mapA) {
        this.mapA = mapA;
    }
    

    public View() {
        
        initComponents();
        draw.setSelected(false);
        carriers = new SimpleLinkedList<>();
        bi = new BufferedImage(this.getWidth(), this.getHeight(), BufferedImage.TYPE_INT_RGB);
        //this.draw.setSelected(true);
        graphPanel = new JPanel() {
            @Override
            public void paint(java.awt.Graphics g) {
                g.drawImage(map1, 0, 0, this);
            }

        };
        this.setContentPane(graphPanel);
        graphPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                graphPanelMouseClicked(evt);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        graphPanel = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        trayecto = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        draw = new javax.swing.JCheckBoxMenuItem();
        runCheck = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        graphPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                graphPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout graphPanelLayout = new javax.swing.GroupLayout(graphPanel);
        graphPanel.setLayout(graphPanelLayout);
        graphPanelLayout.setHorizontalGroup(
            graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 855, Short.MAX_VALUE)
        );
        graphPanelLayout.setVerticalGroup(
            graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 686, Short.MAX_VALUE)
        );

        getContentPane().add(graphPanel, java.awt.BorderLayout.PAGE_START);

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        trayecto.setText("Trayecto");
        trayecto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trayectoActionPerformed(evt);
            }
        });
        jMenu2.add(trayecto);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("View");

        draw.setText("Draw graph");
        draw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawActionPerformed(evt);
            }
        });
        jMenu3.add(draw);

        runCheck.setSelected(true);
        runCheck.setText("Run");
        runCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runCheckActionPerformed(evt);
            }
        });
        jMenu3.add(runCheck);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void graphPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_graphPanelMouseClicked

        System.out.print((evt.getX()+10)+"," +(evt.getY()+65)+ "\n");
    }//GEN-LAST:event_graphPanelMouseClicked

    private void runCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runCheckActionPerformed
        if (this.runCheck.isSelected()) {
            this.init();
        }
    }//GEN-LAST:event_runCheckActionPerformed

    private void trayectoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trayectoActionPerformed
        // TODO add your handling code here:
        t.setVisible(true);
    }//GEN-LAST:event_trayectoActionPerformed

    private void drawActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_drawActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBoxMenuItem draw;
    private javax.swing.JPanel graphPanel;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JCheckBoxMenuItem runCheck;
    private javax.swing.JMenuItem trayecto;
    // End of variables declaration//GEN-END:variables

    Graph graph;
    Image map1;
    private Thread runner;
    List<Carrier> carriers;

    public void addCarrier(String origen, String destino) {

        carriers.addLast(new Carrier(graph.getVertex(origen), graph.getVertex(destino), graph.algoritmoFloyd(graph.ParseMatrizAdy(), origen, destino)));


    }

    public Graph getGraph() {
        return graph;
    }

    public void setGraph(Graph g) {
        this.graph = g;

    }

    //@Override
    public void update(Observable o, Object o1) {
        repaint();
    }

    @Override
    public void paint(Graphics g) {
        Graphics media = bi.getGraphics();
        super.paint(media);
        loadImages();
        graph.printInfo(media);
        if (draw.isSelected()) {
            graph.paint(media);
            
        }
        Iterator<Carrier> iteratorC = carriers.getIterator();
        while (iteratorC.hasNext()) {
            iteratorC.getNext().paint((Graphics2D) media);
        }
        g.drawImage(bi, 0, 0, null);
        this.graphPanel.paintComponents(media);
    }
//        Graphics media = map.getGraphics();
//        super.paint(media);
//        //renderImage(media);
//        if (graphBox.isSelected()) {
//            graph.paint(media);
//            c.paint((Graphics2D)media);
//        }
//        this.graphPanel.getGraphics().drawImage(map, 0, 30, null);

    public void loadImages() {
        ImageIcon iih = new ImageIcon(ruta);
        map1 = iih.getImage();
    }

    public void init() {
        runner = new Thread() {
            @Override
            public void run() {
                while (runner == Thread.currentThread() && runCheck.isSelected()) {
                    repaint();
                    Iterator<Carrier> iteratorC = carriers.getIterator();
                    while (iteratorC.hasNext()) {
                        graph.updateCarrier(iteratorC.getNext());
                    }

                    try {
                        Thread.sleep(50);
                    } catch (InterruptedException ex) {
                    }
                }
            }

        };
        runner.start();
    }

//    public Carrier getC() {
//        return c;
//    }
    public void setC(Carrier c) {
        //this.c = c;
    }

}
